name: Build, Push to ECR, and Deploy to ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY: doggy_repo
  ECS_SERVICE: doggy-app
  ECS_CLUSTER: doggy-app
  ECS_TASK_DEFINITION: task-definition.json
  CONTAINER_NAME: ecs-doggy-sandbox
 
  
permissions:
  contents: read

jobs:
  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: lastest #${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG > image.txt

      # Save the image information as an artifact
      - name: Upload image file
        uses: actions/upload-artifact@v2
        with:
          name: image-info
          path: image.txt

        #This line saves the pushed image information to a GitHub Actions output variable called image. The information includes the ECR registry URL, the ECR repository name, and the image tag.

  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: production

    steps:
    - name: Wait for image build and push completion
      run: exit 0
      if: always()

    - name: Download image information file
      uses: actions/download-artifact@v2
      with:
        name: image-info
        path: .

    - name: Read image information from file
      id: read-image-info
      run: echo "::set-output name=image::$(cat image.txt)"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        #The task definition JSON file contains the configuration for your ECS task, including the container definitions.
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.read-image-info.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
